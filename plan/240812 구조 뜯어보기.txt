
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

<구조>

▶ Program cs파일에 넴슾 TextRPG > internal class Program > 그 안에 Main문 있음

▶ Enum cs파일에도 넴슾 TextRPG > 클래스 따로 X > 여기에 진짜 이넘만 다 너놈 (씬타입, 직업)

▶ Game cs파일에도 넴슾 TextRPG > public class Game > 게임 루프패턴 이용함
(다른 클래스 참조하기 위해 using 지시문 입력한게 있음)
ㄴ 게임 작동중인지, 씬 배열, 클래스형 현재 씬 (게터세터), 클래스형 플레이어(게터세터) 
ㄴ 런() : 게임 루프패턴,  씬변경(),  게임오버();
* 게임 루프패턴: 스타트, 렌더&인풋&업뎃, 엔드
ㄴ스타트(조건 트루, 씬 1차원배열 다 초기화, 배열의 인덱스에(int)이넘 넣어두고 인스턴스 생성, 씬에 타이틀 넣어서 준비);
ㄴ Render(씬 클래스의 렌더함수);  
ㄴ Input(씬 클래스의 인풋함수);  
ㄴ Update(씬 클래스의 업뎃함수);
ㄴ End(씬 클래스의 엔드함수);  


▶ Monsters 폴더 > Monsterts cs파일 > 넴슾 TextRPG.Monsters > public abstract class Monster > 필드만 있음
ㄴ 필드 - 이름, 체력, 공격력, 방어력
ㄴ 팩토리 패턴으로 다양한 몬스터 구현 시도

▶ Players 폴더 > Players cs파일 > 넴슾 TextRPG.Players > 
(다른 클래스 참조하기 위해 using 지시문 입력한게 있음)
ㄴ 0. 기본 플레이어:  필드 - 이름, 직업, 현재체력, 최대체력, 공격력, 방어력, 소지금액  (모두 게터세터 이용해 초기화)
ㄴ 0. 기본 플레이어:  함수1 - 추상함수 Skill(Monster monster) 스킬 선언!
ㄴ 0. 기본 플레이어:  함수2 - 현재 내용 보여주는 코드 작성, 이때 SetCursorPosition이라는 함수를 이용. C# 기본 함수인듯 한데, 이 커서 포지션이 어디에 쓰이는 커서지? 콘솔에 출력 대기 그 깜빡깜빡 | 이거??

ㄴ 1. 전사: 생성자(인수:이름) 피통많음,  override함수 Skill(Monster monster)은 아직 미구현
ㄴ 2. 법사: 생성자(인수:이름) 피통적고 딜쎔 방어구림,  override함수 Skill(Monster monster)은 아직 미구현
ㄴ 3. 도적: 생성자(인수:이름) 중간임,  override함수 Skill(Monster monster)은 아직 미구현


▶ Scenes 폴더 > Scenes cs파일 > 넴슾 TextRPG.Scenes > public abstract class Scene > 필드, 생성자, 메서드
ㄴ 0. 기본 씬:  필드 - protected 클래스형 게임
ㄴ 0. 기본 씬:  생성자 - game에 입력받은 Game클래스형 game을 대입해주기
ㄴ 0. 기본 씬:  메서드 - 추상함수 Enter(), Render(), Input(), Update(), Exit();

ㄴ 1. 타이틀: 생성자 - 기존의 것을 계속 씀.  인풋(), 렌더(), 업뎃()에 내용 넣음. 업뎃()에서 셀렉신 연결해둠

ㄴ 2. 선택씬: 필드 - State 열거형 선언{이름,직업,확인}, State 변수 curState 선언, string 인풋, string nameInput 
ㄴ 2. 선택씬: 생성자 - 기존의 것을 계속 씀.  엔터(), 인풋(), 렌더(), 업뎃() 있음
ㄴ 2. 선택씬: 엔터()에서 curState에 이넘.Name 넣어줌.  
ㄴ 2. 선택씬: 인풋()에서 입력내용 받아옴
ㄴ 2. 선택씬: 업뎃()에서 curState에 들어가있는 이넘이 뭔지 검사, 예외처리 거친 후에 입력받은 string을 해당 이넘 요소에 알맞게 넣어주고, 이넘 내용을 다음 State로 넘겨줌.  캐릭터 생성 완료(성공)시 타운씬ㄱ
ㄴ 2. 선택씬: 렌더()에서 curState가 이름, 직업, 확인 중에서 뭔지에 따라 안내멘트 출력. 

ㄴ 3. 마을씬: 필드 - 스트링 인풋, 생성자 - 기존의 것을 계속 씀.  엔터(), 인풋(), 렌더(), 업뎃() 있음
ㄴ 3. 마을씬: 엔터()에 Thread.Sleep(2000)라는 함수가 처음 등장!! 유니티에서 Invoke() 했던거랑 똑같은애인듯.
ㄴ 3. 마을씬: 인풋()에서 입력내용 받아옴
ㄴ 3. 마을씬: 렌더()에서 다음 이동할 공간 선택하라는 내용 출력
ㄴ 3. 마을씬: 업뎃()에서 인풋 내용에 따른 스위치로 각각 배틀씬, 인벤씬, 상점씬으로 연결

ㄴ 4. 상점씬: 필드 - 없음, 생성자 - 기존,  엔터(), 인풋(), 렌더(), 업뎃() 있음
ㄴ 4. 상점씬: 엔터()에 Thread.Sleep()으로 입장 문구 출력하는 연출
ㄴ 4. 상점씬: 인풋(), 렌더(), 업뎃()은 아직 미구현, 업뎃()에 타운씬으로 돌아가는 연출 있음

ㄴ 5. 인벤토: 필드 - 없음, 생성자 - 기존,  엔터(), 인풋(), 렌더(), 업뎃() 있음
ㄴ 5. 인벤토: 엔터()에 Thread.Sleep()으로 입장 문구 출력하는 연출
ㄴ 5. 인벤토: 인풋(), 렌더(), 업뎃()은 아직 미구현, 업뎃()에 타운씬으로 돌아가는 연출 있음

ㄴ 6. 배틀씬: 필드 - 없음, 생성자 - 기존,  엔터(), 인풋(), 렌더(), 업뎃() 있음
ㄴ 6. 배틀씬: 엔터()에 Thread.Sleep()으로 입장 문구 출력하는 연출
ㄴ 6. 배틀씬: 인풋(), 렌더(), 업뎃()은 아직 미구현, 업뎃()에 타운씬으로 돌아가는 연출 있음





